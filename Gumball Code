bool START(TColors c)  // Written by Joanna Lou
{
	SensorType[S2]=sensorSONAR;

	if(c==REDCOLOR || c==GREENCOLOR || c==YELLOWCOLOR || c==BLUECOLOR)
		{
			while(SensorValue[S2]>15) //15 cm from hand
			{
				nxtDisplayString(0,"Wave please!");
			}

			while(nNxtButtonPressed==-1)
				{
					nxtDisplayString(1,"Hello, user.");
					nxtDisplayString(2,"Button2Begin");
				}

			while(nNxtButtonPressed!=-1)
				{}

			eraseDisplay();
			return true;
		}

		return false;

}

bool isFull(int colour, float *num_colour)  //Written by Joonah Kim
{
	if(num_colour[colour] < 6)  //Function checks if the tubes are full, 6=Max Capacity
	{
		num_colour[colour]+=1; //adds 1 to the array that keeps track of the number of gumballs in the tubes
		return false;
	}
	return true;
}

void Rotate(int colour, float & curr_pos)	//Written by David Chau
{

	SensorType[S3] = sensorTouch;

	int pos_colour[6]; //Position of each colour tube
	pos_colour[2]=0; //blue
	pos_colour[3]=90;  //green
	pos_colour[4]=180; //yellow
	pos_colour[5]=270; //red

	float rot_amount = 0;
	rot_amount = pos_colour[colour] - curr_pos; //distance between the position wanted and the current position
	if (pos_colour[colour] < curr_pos)	
		rot_amount = 360 + rot_amount;

	int touch_count = 0;
	touch_count = abs(rot_amount / 90); //amount of times the touch sensor needs to clicked before correct colour is reached
	motor[motorA] = -10;
	
	while(touch_count > 0)
	{
	while(SensorValue[S3] != 1){} //sees if touch sensor has been touched
	while(SensorValue[S3] == 1){}
	
	touch_count=touch_count-1;
		wait1Msec(100);
	}

	motor[motorA]=0;//stop motor A
	curr_pos = pos_colour[colour]; //set current position as the postion after sorting one gumball
}

void Drop(tMotor m, float dist)	//Written by Simon Cheng
{
	nMotorEncoder[m]=0;

	while(abs(nMotorEncoder[m])<dist) //amount of spin for each encoder was found to be different: motorC=165, motor B=250
	{				  
		motor[m]=-20;  //goes out
	}
	
	while(abs(nMotorEncoder[m])>0)//-1
	{
		motor[m]=20;  //goes in
	}

	motor[m] = 0;		
}

bool isEmpty(int colour, int amount, float *num_colour)	//Written by Joanna Lou
{
	num_colour[colour]=num_colour[colour]-amount;
	if(num_colour[colour]>0)  //checks if the tubes have gumballs in them 
	{
		wait1Msec(250);
		return false;
	}
	return true;
}

void Dispense(float *num_colour, int c, int n, int & curr_pos) //Written by Joanna Lou
{
	Rotate(c, curr_pos); //Rotates to colour asked for by user

	while(n>0) //n=amount asked for by user
	{
		Drop(motorC,165);   //motor at the bottom
		n=n-1; //continue dispensing until the amount has been reached
		wait1Msec(1000);
	}
}

//Written by Joanna Lou
int buttonpress()  //referenced from [2]
{
  	TButtons b;
  	b = nNxtButtonPressed; //checks if button is pressed

  	switch(b)
  	{
      	case kLeftButton:  //when left button is pressed, return 1
      	{
        	return 1;
		break;
      	}

      	case kRightButton:   //when right button is pressed, return 2
	{
         	return 2;
         	break;
      	}

      	case kEnterButton:   //when middle button is pressed, return 3
      	{
       		return 3;
        	break;
      	}
      	default:	//if no button is pressed, return 0
      	{
        	return 0;
        	break;
      	}
}

void Menu(float *num_colour, int & sel_colour, int & sel_num) //Written by Joanna Lou
{
	eraseDisplay();
  	nNxtButtonTask=1;
  	int button=-1;

	string name_colour[7];  //stores the names of colours, corresponds to int value of the colour
	name_colour[2]= "Blue"; 
	name_colour[3]= "Green";
	name_colour[4]= "Yellow";
	name_colour[5]= "Red";

	nxtDisplayString(0, "Choose colour:");

    	for(int line=2; line <6; line++)	//outputs all the names of the colours
  	{
    		nxtDisplayString(line, "   %s", name_colour[line]);
    		
    		if(line==2)
    		{
    			nxtDisplayString(line, "-> %s", name_colour[line]); //places a "cursor" at the first colour
    		}
  	}

  	int i=2;

  	while(button!=3) //Middle button has not been pushed=colour has not been selected
	{
    		button=buttonpress();//reads in button press
    		if(button==2) //Right, moves cursor down the list
  		{
  			i=i+1;
  			nxtDisplayString(i, "-> %s", name_colour[i]);
  			nxtDisplayString(i-1, "   %s", name_colour[i-1]); //removes the cursor from the line before

  			if(i>5) //cannot continue past the end of the menu
  			{
  				i=5;
  				nxtDisplayString(i, "-> %s", name_colour[i]); //cursor stays at the last item in the list
  				nxtDisplayString(6, "               ");
  			}
  		}
  		else if(button==1) //Left, moves cursor up the list
  		{
  			i=i-1;
  			nxtDisplayString(i, "-> %s", name_colour[i]);
  			nxtDisplayString(i+1, "   %s", name_colour[i+1]); //removes cursor from the line after

  			if(i<2)  //cannot move past the top of the list
  			{
  				i=2;
  				nxtDisplayString(i, "-> %s", name_colour[i]);  //cursor stays at the first item in the list
  				nxtDisplayString(1, "                   ");
  			}
  		}
  		wait1Msec(350);
	}
	eraseDisplay();

	nxtDisplayString(0, "There are %i,%s", num_colour[i], name_colour[i]); //displays how many of the selected colour there are
  	nxtDisplayString(1, "How many?");
  	nxtDisplayString(2, "1"); //selection starts at 1

  	int j=1;

  	button=-1;

  	while(button!=3)
	{
		button=buttonpress();

    		if(button==2)  //Right, increases value of selection
  		{
  			j=j+1;
  			nxtDisplayString(2, "%i", j);

  			if(j>num_colour[i])  //user cannot ask for more gumballs than what is in the tube
  			{
  				j=num_colour[i]; 
  				nxtDisplayString(2, "%i", j);  //value will not increase furth
  			}
  		}
  		else if(button==1)  //Left, decreases value of the selection
  		{
  			j=j-1;
  			nxtDisplayString(2, "%i", j);

  			if(j<1)  //User cannot make a negative or 0 selection
  			{
  				j=1;
  				nxtDisplayString(2, "%i", j);  //value stays at 1
  			}
  		}
  		wait1Msec(350);
	}

	eraseDisplay();

	sel_colour=i; //saves int value of colour selected
	sel_num=j;  //saves number of gumballs user wishes to dispense

	nxtDisplayString(0, "You want %i, %s", j, name_colour[i]);
	nxtDisplayString(1, "Dispensing...");
	wait1Msec(1000);
}

task main() //Written by Joanna Lou and David Chau
{
	SensorType[S1] = sensorCOLORFULL;
	wait1Msec(500);

	float num_colour[7]={1,0,0,0,0,0,0};//black(1), blue(2), green(3), yellow(4), red(5), white(6)
	float curr_pos = 0;

	int sel_colour=0;
	int sel_num=0;

	bool check=START(SensorValue[S1]);//checks if any gumballs are there

	if(check==false)//if gumballs aren't there and 10 seconds haven't passed yet
	{
		time1[T1]=0;
		while(time1[T1]<10000 && check == false) //User has 10 seconds to refill the tube 
		{
			nxtDisplayString(0,"Please Refill"); //prompts for refill for 10 seconds

			if(SensorValue[S1]==REDCOLOR || SensorValue[S1]==GREENCOLOR || SensorValue[S1]==YELLOWCOLOR || SensorValue[S1]==BLUECOLOR)//if a colour is detected, will go to start function and wait for user
			{
				eraseDisplay();
				check = START(SensorValue[S1]);
			}
		}
	}

	if(check)   //if a gumball is detected and a person is there
	{
		int colourSave = SensorValue[S1];
		wait1Msec(2000);
		
		while(isFull(colourSave, num_colour)==false && (colourSave==2 || colourSave==3 || colourSave==4 || colourSave==5)) //continues sorting until one of the tubes is full and a colour is still detected
		{	
			Rotate(colourSave, curr_pos); //rotates to correct colour
			Drop(motorB, 250);	//drops the gumbal into the tube
			wait1Msec(2500);
			colourSave = SensorValue[S1]; //gumball colour will change after one gumball has been sorted
		}


		while(isEmpty(sel_colour, sel_num, num_colour)==false) //will continue displaying the menu until one of the tubes is empty
		{
			Menu(num_colour, sel_colour, sel_num);
			Dispense(num_colour, sel_colour, sel_num, curr_pos);
			eraseDisplay();
		}
	}

}
